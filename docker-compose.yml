version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: mysql_db_prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./data/00_schema.sql:/docker-entrypoint-initdb.d/00_schema.sql
      - ./data/yugioh_cards.sql:/docker-entrypoint-initdb.d/01_yugioh_cards.sql
      - ./data/yugioh_sets.sql:/docker-entrypoint-initdb.d/02_yugioh_sets.sql
      - ./data/yugioh_sessions.sql:/docker-entrypoint-initdb.d/03_yugioh_sessions.sql
      - ./data/wallet_point_breakdowns.sql:/docker-entrypoint-initdb.d/04_wallet_point_breakdowns.sql
      - ./data/testdata.sql:/docker-entrypoint-initdb.d/05_testdata.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: next_app_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.production
    volumes:
      - ./public/deck-images:/app/public/deck-images  # persist deck images
      - ./public/banlist-images:/app/public/banlist-images  # persist banlist images
    networks:
      - app-network

  discord_bot:
    build:
      context: .
      dockerfile: Dockerfile.discord
    container_name: discord_bot_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.production
    networks:
      - app-network

volumes:
  mysql_data:

networks:
  app-network:
    driver: bridge
