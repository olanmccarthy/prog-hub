// Prisma schema for prog-hub
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Player {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  password String   @db.VarChar(255)
  isAdmin  Boolean  @default(false) @map("is_admin")

  // Relations
  decklists              Decklist[]
  suggestions            BanlistSuggestion[]
  votes                  BanlistSuggestionVote[]
  pairingsAsPlayer1      Pairing[]               @relation("Player1Pairings")
  pairingsAsPlayer2      Pairing[]               @relation("Player2Pairings")
  victoryPoints          VictoryPoint[]
  moderatedSuggestions   BanlistSuggestion[]     @relation("ModeratedSuggestions")
  wallet                 Wallet?
  transactions           Transaction[]

  @@map("players")
}

model Session {
  id                    Int       @id @default(autoincrement())
  number                Int       @unique
  date                  DateTime?
  setId                 Int?      @map("set_id")
  complete              Boolean   @default(false)
  active                Boolean   @default(false)
  eventWheelSpun        Boolean   @default(false) @map("event_wheel_spun")
  victoryPointsAssigned Boolean   @default(false) @map("victory_points_assigned")
  walletPointsAssigned  Boolean   @default(false) @map("wallet_points_assigned")
  moderatorId           Int?      @map("moderator_id")

  // Top placements (stored as nullable integers, not relations)
  first  Int?
  second Int?
  third  Int?
  fourth Int?
  fifth  Int?
  sixth  Int?

  // Relations
  set                Set?                @relation(fields: [setId], references: [id])
  decklists          Decklist[]
  pairings           Pairing[]
  victoryPoints      VictoryPoint[]
  walletTransactions WalletTransaction[]

  @@index([active], map: "idx_active")
  @@index([complete], map: "idx_complete")
  @@index([moderatorId], map: "idx_moderator_id")
  @@map("sessions")
}

model Decklist {
  id       Int      @id @default(autoincrement())
  playerId Int      @map("player_id")
  sessionId Int     @map("session_id")

  maindeck   Json
  sidedeck   Json
  extradeck  Json
  submittedAt DateTime @default(now()) @map("submitted_at")

  // Relations
  player  Player  @relation(fields: [playerId], references: [id])
  session Session @relation(fields: [sessionId], references: [id])

  @@index([sessionId], map: "idx_session_id")
  @@index([playerId], map: "idx_player_id")
  @@map("decklists")
}

model Banlist {
  id        Int    @id @default(autoincrement())
  sessionId Int    @map("session_id")

  banned      Json
  limited     Json
  semilimited Json
  unlimited   Json

  // Relations
  suggestions BanlistSuggestion[]

  @@index([sessionId], map: "idx_banlist_session_id")
  @@map("banlists")
}

model BanlistSuggestion {
  id         Int     @id @default(autoincrement())
  banlistId  Int     @map("banlist_id")
  playerId   Int     @map("player_id")
  moderatorId Int?   @map("moderator_id")

  banned      Json
  limited     Json
  semilimited Json
  unlimited   Json
  chosen      Boolean @default(false)

  // Relations
  banlist   Banlist                 @relation(fields: [banlistId], references: [id])
  player    Player                  @relation(fields: [playerId], references: [id])
  moderator Player?                 @relation("ModeratedSuggestions", fields: [moderatorId], references: [id])
  votes     BanlistSuggestionVote[]

  @@index([banlistId], map: "idx_suggestion_banlist_id")
  @@index([playerId], map: "idx_suggestion_player_id")
  @@index([chosen], map: "idx_suggestion_chosen")
  @@map("banlist_suggestions")
}

model BanlistSuggestionVote {
  id           Int @id @default(autoincrement())
  playerId     Int @map("player_id")
  suggestionId Int @map("suggestion_id")

  // Relations
  player     Player            @relation(fields: [playerId], references: [id])
  suggestion BanlistSuggestion @relation(fields: [suggestionId], references: [id])

  @@index([suggestionId], map: "idx_vote_suggestion_id")
  @@index([playerId], map: "idx_vote_player_id")
  @@map("banlist_suggestion_votes")
}

model Pairing {
  id        Int @id @default(autoincrement())
  sessionId Int @map("session_id")
  round     Int
  player1Id Int @map("player1_id")
  player2Id Int @map("player2_id")

  player1wins Int @default(0)
  player2wins Int @default(0)

  // Relations
  session Session @relation(fields: [sessionId], references: [id])
  player1 Player  @relation("Player1Pairings", fields: [player1Id], references: [id])
  player2 Player  @relation("Player2Pairings", fields: [player2Id], references: [id])

  @@index([sessionId], map: "idx_pairing_session_id")
  @@index([round], map: "idx_pairing_round")
  @@map("pairings")
}

model VictoryPoint {
  id        Int @id @default(autoincrement())
  playerId  Int @map("player_id")
  sessionId Int @map("session_id")

  // Relations
  player  Player  @relation(fields: [playerId], references: [id])
  session Session @relation(fields: [sessionId], references: [id])

  @@map("victory_points")
}

model Wallet {
  id       Int @id @default(autoincrement())
  playerId Int @unique @map("player_id")
  amount   Int @default(0)

  // Relations
  player             Player              @relation(fields: [playerId], references: [id], onDelete: Cascade)
  walletTransactions WalletTransaction[]

  @@index([playerId], map: "idx_wallet_player_id")
  @@map("wallets")
}

model WalletTransaction {
  id        Int      @id @default(autoincrement())
  walletId  Int      @map("wallet_id")
  sessionId Int?     @map("session_id")
  amount    Int      // Positive for credits, negative for debits
  type      String   @db.VarChar(50) // e.g., "VICTORY_POINT_AWARD", "SHOP_PURCHASE", "MANUAL_ADJUSTMENT"
  description String? @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  wallet  Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([walletId], map: "idx_wallet_transaction_wallet_id")
  @@index([sessionId], map: "idx_wallet_transaction_session_id")
  @@index([createdAt], map: "idx_wallet_transaction_created_at")
  @@map("wallet_transactions")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  playerId  Int      @map("player_id")
  setId     Int      @map("set_id")
  amount    Int
  date      DateTime @default(now())

  // Relations
  player Player @relation(fields: [playerId], references: [id])
  set    Set    @relation(fields: [setId], references: [id])

  @@index([playerId], map: "idx_transaction_player_id")
  @@index([setId], map: "idx_transaction_set_id")
  @@index([date], map: "idx_transaction_date")
  @@map("transactions")
}

model Card {
  id            Int     @id @default(autoincrement())
  cardName      String  @map("card_name") @db.VarChar(255)
  cardType      String? @map("card_type") @db.VarChar(50)
  attribute     String? @db.VarChar(50)
  property      String? @db.VarChar(50)
  types         String? @db.VarChar(100)
  level         Int?
  atk           Int?
  def           Int?
  link          Int?
  pendulumScale Int?    @map("pendulum_scale")

  @@map("cards")
}

model Set {
  id            Int      @id @default(autoincrement())
  setName       String   @map("set_name") @db.VarChar(255)
  setCode       String   @map("set_code") @db.VarChar(50)
  numOfCards    Int      @map("num_of_cards")
  tcgDate       DateTime @map("tcg_date") @db.Date
  setImage      String?  @map("set_image") @db.VarChar(500)
  isASession    Boolean  @default(false) @map("is_a_session")
  isPurchasable Boolean  @default(true) @map("is_purchasable")
  isPromo       Boolean  @default(false) @map("is_promo")
  price         Int      @default(4)

  // Relations
  sessions     Session[]
  transactions Transaction[]

  @@index([setCode], map: "idx_set_code")
  @@index([tcgDate], map: "idx_tcg_date")
  @@map("sets")
}

model EventWheelEntry {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.Text
  chance      Int

  @@map("event_wheel_entries")
}

model LoserPrizingEntry {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.Text
  chance      Int

  @@map("loser_prizing_entries")
}

model WalletPointBreakdown {
  id     Int     @id @default(autoincrement())
  name   String  @default("Unnamed") @db.VarChar(255)
  first  Int     @map("first")
  second Int     @map("second")
  third  Int     @map("third")
  fourth Int     @map("fourth")
  fifth  Int     @map("fifth")
  sixth  Int     @map("sixth")
  active Boolean @default(false)

  @@map("wallet_point_breakdowns")
}
